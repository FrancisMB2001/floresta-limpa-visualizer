// This file is auto-generated by @hey-api/openapi-ts

import { Geometry } from "geojson";

export type StacFeature = {
    id: string;
    type: 'Feature';
    geometry?: Geometry;
    properties: {
        [key: string]: unknown;
    };
};

export type FieldErrors = {
    [key: string]: {
        value?: unknown;
        message: string;
    };
};

export type ValidateError = {
    name: string;
    message: string;
    stack?: string;
    status: number;
    fields: FieldErrors;
};

export type _Error = {
    name: string;
    message: string;
    stack?: string;
};

export type SimplePoint = {
    type: 'Point';
    coordinates: Array<number>;
};

export type SimpleLineString = {
    type: 'LineString';
    coordinates: Array<Array<number>>;
};

export type SimplePolygon = {
    type: 'Polygon';
    coordinates: Array<Array<Array<number>>>;
};

export type SimpleMultiPolygon = {
    type: 'MultiPolygon';
    coordinates: Array<Array<Array<Array<number>>>>;
};

/**
 * Construct a type with a set of properties K of type T
 */
export type RecordStringAny = {
    [key: string]: unknown;
};

export type SimpleFeature = {
    type: 'Feature';
    geometry: SimplePoint | SimpleLineString | SimplePolygon | SimpleMultiPolygon;
    properties: RecordStringAny;
};

export type SimpleFeatureCollection = {
    type: 'FeatureCollection';
    features: Array<SimpleFeature>;
};

export type SimpleGeoJson = SimplePoint | SimpleLineString | SimplePolygon | SimpleMultiPolygon | SimpleFeature | SimpleFeatureCollection;

export type LocationRequestBody = {
    location: SimpleGeoJson;
};

export type FuelbreakView = 'full' | 'no_geometry';

export type JobStatus = 'processing' | 'done' | 'error';

export type JobEntry = {
    id: string;
    status: JobStatus;
    description: string | null;
    downloadUrl: string | null;
    startedAt: string;
    completedAt: string | null;
};

export type NotFoundResponse = {
    message: string;
    details: {
        jobId: string;
    };
};

export type OutOfBoundariesResponse = {
    message: string;
    details: {
        location: string;
    };
};

export type NetCdfRequest = {
    /**
     * Start time for data filtering
     */
    startTime: string;
    /**
     * End time for data filtering
     */
    endTime: string;
    location: SimpleGeoJson;
    /**
     * Coordinate reference system (optional)
     */
    crs?: string;
};

export type GetSegmentsFromStacData = {
    body: LocationRequestBody;
    path?: never;
    query?: never;
    url: '/stac/segments';
};

export type GetSegmentsFromStacErrors = {
    /**
     * Invalid Parameters
     */
    422: ValidateError;
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetSegmentsFromStacError = GetSegmentsFromStacErrors[keyof GetSegmentsFromStacErrors];

export type GetSegmentsFromStacResponses = {
    /**
     * Segments fetched successfully from STAC API
     */
    200: Array<StacFeature>;
};

export type GetSegmentsFromStacResponse = GetSegmentsFromStacResponses[keyof GetSegmentsFromStacResponses];

export type GetSegmentIdsFromStacData = {
    body: LocationRequestBody;
    path?: never;
    query?: never;
    url: '/stac/segments/ids';
};

export type GetSegmentIdsFromStacErrors = {
    /**
     * Invalid Parameters
     */
    422: ValidateError;
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetSegmentIdsFromStacError = GetSegmentIdsFromStacErrors[keyof GetSegmentIdsFromStacErrors];

export type GetSegmentIdsFromStacResponses = {
    /**
     * Segment IDs fetched successfully from STAC API
     */
    200: Array<string>;
};

export type GetSegmentIdsFromStacResponse = GetSegmentIdsFromStacResponses[keyof GetSegmentIdsFromStacResponses];

export type GetFuelBreaksFromStacData = {
    body?: never;
    path?: never;
    query?: {
        location?: string;
        view?: FuelbreakView;
    };
    url: '/stac/fuel-breaks';
};

export type GetFuelBreaksFromStacErrors = {
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetFuelBreaksFromStacError = GetFuelBreaksFromStacErrors[keyof GetFuelBreaksFromStacErrors];

export type GetFuelBreaksFromStacResponses = {
    /**
     * Fuel breaks fetched successfully
     */
    200: Array<StacFeature>;
};

export type GetFuelBreaksFromStacResponse = GetFuelBreaksFromStacResponses[keyof GetFuelBreaksFromStacResponses];

export type GetFuelBreakFromStacByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/stac/fuel-breaks/{id}';
};

export type GetFuelBreakFromStacByIdErrors = {
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetFuelBreakFromStacByIdError = GetFuelBreakFromStacByIdErrors[keyof GetFuelBreakFromStacByIdErrors];

export type GetFuelBreakFromStacByIdResponses = {
    /**
     * Fuel break fetched successfully
     */
    200: Array<StacFeature>;
};

export type GetFuelBreakFromStacByIdResponse = GetFuelBreakFromStacByIdResponses[keyof GetFuelBreakFromStacByIdResponses];

export type GetJobStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/jobs/{id}';
};

export type GetJobStatusErrors = {
    /**
     * Job not found
     */
    404: NotFoundResponse;
};

export type GetJobStatusError = GetJobStatusErrors[keyof GetJobStatusErrors];

export type GetJobStatusResponses = {
    /**
     * Ok
     */
    200: JobEntry;
};

export type GetJobStatusResponse = GetJobStatusResponses[keyof GetJobStatusResponses];

export type GetNetCdfIndexesData = {
    body: NetCdfRequest;
    path?: never;
    query?: never;
    url: '/indexes/netcdf';
};

export type GetNetCdfIndexesErrors = {
    /**
     * Location out of boundaries
     */
    404: OutOfBoundariesResponse;
    /**
     * Invalid Parameters
     */
    422: ValidateError;
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetNetCdfIndexesError = GetNetCdfIndexesErrors[keyof GetNetCdfIndexesErrors];

export type GetNetCdfIndexesResponses = {
    /**
     * NetCDF Job Created
     */
    200: {
        message: string;
        status: string;
        jobId: string;
    };
};

export type GetNetCdfIndexesResponse = GetNetCdfIndexesResponses[keyof GetNetCdfIndexesResponses];

export type ClientOptions = {
    baseUrl: 'http://91.134.84.183/api' | (string & {});
};