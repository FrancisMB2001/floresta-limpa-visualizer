// This file is auto-generated by @hey-api/openapi-ts

import { Geometry } from "geojson";

export type StacFeature = {
    id: string;
    type: 'Feature';
    geometry?: Geometry;
    properties: {
        [key: string]: unknown;
    };
};

export type FieldErrors = {
    [key: string]: {
        value?: unknown;
        message: string;
    };
};

export type ValidateError = {
    name: string;
    message: string;
    stack?: string;
    status: number;
    fields: FieldErrors;
};

export type _Error = {
    name: string;
    message: string;
    stack?: string;
};

export type SimplePoint = {
    type: 'Point';
    coordinates: Array<number>;
};

export type SimpleLineString = {
    type: 'LineString';
    coordinates: Array<Array<number>>;
};

export type SimplePolygon = {
    type: 'Polygon';
    coordinates: Array<Array<Array<number>>>;
};

export type SimpleMultiPolygon = {
    type: 'MultiPolygon';
    coordinates: Array<Array<Array<Array<number>>>>;
};

/**
 * Construct a type with a set of properties K of type T
 */
export type RecordStringAny = {
    [key: string]: unknown;
};

export type SimpleFeature = {
    type: 'Feature';
    geometry: SimplePoint | SimpleLineString | SimplePolygon | SimpleMultiPolygon;
    properties: RecordStringAny;
};

export type SimpleFeatureCollection = {
    type: 'FeatureCollection';
    features: Array<SimpleFeature>;
};

export type SimpleGeoJson = SimplePoint | SimpleLineString | SimplePolygon | SimpleMultiPolygon | SimpleFeature | SimpleFeatureCollection;

export type LocationRequestBody = {
    location: SimpleGeoJson;
};

export type FuelbreakView = 'full' | 'no_geometry';

export type JobStatus = 'processing' | 'done' | 'error';

export type JobEntry = {
    id: string;
    status: JobStatus;
    description: string | null;
    downloadUrl: string | null;
    startedAt: string;
    completedAt: string | null;
    agent: string | null;
};

export type NotFoundResponse = {
    message: string;
    details: {
        jobId: string;
    };
};

export type RequestJobEntry = {
    description: string | null;
    agent: string | null;
};

export type NodeJsReadableStream = {
    readable: boolean;
};

export type UnauthorizedResponse = {
    message: string;
    details?: {
        error?: unknown;
    };
};

export type OutOfBoundariesResponse = {
    message: string;
    details: {
        location: string;
    };
};

export type TimeSeriesFileType = 'netcdf' | 'tiff' | 'geopackge' | 'shapefile';

export type TimeSeriesFileRequest = {
    fileType: TimeSeriesFileType;
    /**
     * Start time for data filtering
     */
    startTime: string;
    /**
     * End time for data filtering
     */
    endTime: string;
    location: SimpleGeoJson;
    /**
     * Coordinate reference system (optional)
     */
    crs?: string;
};

export type DetailedFuelBreak = {
    spatialObjectId: number;
    code: number;
    sectionCode: number;
    fuelBreakType: {
        structure: string;
        fuel: string;
        network: string;
        id: number;
    };
    spatialObject: {
        boundingBox: SimpleGeoJson;
        limits: SimpleGeoJson;
        observations: string;
        coverage: string;
        area: number;
    };
    responsibleEntityId: number;
    responsibleEntityName: string;
};

export type UserInfo = {
    account_id: number;
    entity_id?: number;
    account_username: string;
    account_email: string;
    account_accepted: boolean;
    account_blocked: boolean;
    account_active: boolean;
    account_properties?: unknown;
    created_at?: string;
    role_id: number;
    role: string;
};

export type LoginResponse = {
    token: string;
    user: UserInfo;
};

export type LoginRequest = {
    username: string;
    password: string;
};

export type RegisterRequest = {
    email: string;
    password: string;
};

export type GetSegmentsFromStacData = {
    body: LocationRequestBody;
    path?: never;
    query?: never;
    url: '/stac/segments';
};

export type GetSegmentsFromStacErrors = {
    /**
     * Invalid Parameters
     */
    422: ValidateError;
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetSegmentsFromStacError = GetSegmentsFromStacErrors[keyof GetSegmentsFromStacErrors];

export type GetSegmentsFromStacResponses = {
    /**
     * Segments fetched successfully from STAC API
     */
    200: Array<StacFeature>;
};

export type GetSegmentsFromStacResponse = GetSegmentsFromStacResponses[keyof GetSegmentsFromStacResponses];

export type GetSegmentIdsFromStacData = {
    body: LocationRequestBody;
    path?: never;
    query?: never;
    url: '/stac/segments/ids';
};

export type GetSegmentIdsFromStacErrors = {
    /**
     * Invalid Parameters
     */
    422: ValidateError;
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetSegmentIdsFromStacError = GetSegmentIdsFromStacErrors[keyof GetSegmentIdsFromStacErrors];

export type GetSegmentIdsFromStacResponses = {
    /**
     * Segment IDs fetched successfully from STAC API
     */
    200: Array<string>;
};

export type GetSegmentIdsFromStacResponse = GetSegmentIdsFromStacResponses[keyof GetSegmentIdsFromStacResponses];

export type GetFuelBreaksFromStacData = {
    body?: never;
    path?: never;
    query?: {
        location?: string;
        view?: FuelbreakView;
    };
    url: '/stac/fuel-breaks';
};

export type GetFuelBreaksFromStacErrors = {
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetFuelBreaksFromStacError = GetFuelBreaksFromStacErrors[keyof GetFuelBreaksFromStacErrors];

export type GetFuelBreaksFromStacResponses = {
    /**
     * Fuel breaks fetched successfully
     */
    200: Array<StacFeature>;
};

export type GetFuelBreaksFromStacResponse = GetFuelBreaksFromStacResponses[keyof GetFuelBreaksFromStacResponses];

export type GetFuelBreakFromStacByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/stac/fuel-breaks/{id}';
};

export type GetFuelBreakFromStacByIdErrors = {
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GetFuelBreakFromStacByIdError = GetFuelBreakFromStacByIdErrors[keyof GetFuelBreakFromStacByIdErrors];

export type GetFuelBreakFromStacByIdResponses = {
    /**
     * Fuel break fetched successfully
     */
    200: Array<StacFeature>;
};

export type GetFuelBreakFromStacByIdResponse = GetFuelBreakFromStacByIdResponses[keyof GetFuelBreakFromStacByIdResponses];

export type DeleteJobData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/jobs/{id}';
};

export type DeleteJobErrors = {
    /**
     * No existing job found with provided id
     */
    404: unknown;
};

export type DeleteJobResponses = {
    /**
     * Job sucessfuly deleted
     */
    204: void;
};

export type DeleteJobResponse = DeleteJobResponses[keyof DeleteJobResponses];

export type GetJobStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/jobs/{id}';
};

export type GetJobStatusErrors = {
    /**
     * Job not found
     */
    404: NotFoundResponse;
};

export type GetJobStatusError = GetJobStatusErrors[keyof GetJobStatusErrors];

export type GetJobStatusResponses = {
    /**
     * Ok
     */
    200: JobEntry;
};

export type GetJobStatusResponse = GetJobStatusResponses[keyof GetJobStatusResponses];

export type PutJobData = {
    body: JobEntry;
    path: {
        id: string;
    };
    query?: never;
    url: '/jobs/{id}';
};

export type PutJobErrors = {
    /**
     * No existing job found with provided id
     */
    404: unknown;
    /**
     * Conflict with different existing job
     */
    409: unknown;
};

export type PutJobResponses = {
    /**
     * Job sucessfuly updated
     */
    200: JobEntry;
};

export type PutJobResponse = PutJobResponses[keyof PutJobResponses];

export type GetJobsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/jobs';
};

export type GetJobsResponses = {
    /**
     * All jobs returned
     */
    200: Array<JobEntry>;
};

export type GetJobsResponse = GetJobsResponses[keyof GetJobsResponses];

export type PostJobData = {
    body: RequestJobEntry;
    path?: never;
    query?: never;
    url: '/jobs';
};

export type PostJobResponses = {
    /**
     * New job created
     */
    201: JobEntry;
};

export type PostJobResponse = PostJobResponses[keyof PostJobResponses];

export type GetTimeSeriesIndexFileData = {
    body?: never;
    path: {
        /**
         * Id of the file, same as the job id of the file request.
         */
        id: string;
    };
    query?: never;
    url: '/time-series-datasets/{id}';
};

export type GetTimeSeriesIndexFileErrors = {
    /**
     * Not Found
     */
    404: _Error;
};

export type GetTimeSeriesIndexFileError = GetTimeSeriesIndexFileErrors[keyof GetTimeSeriesIndexFileErrors];

export type GetTimeSeriesIndexFileResponses = {
    /**
     * File download
     */
    200: NodeJsReadableStream;
};

export type GetTimeSeriesIndexFileResponse = GetTimeSeriesIndexFileResponses[keyof GetTimeSeriesIndexFileResponses];

export type GenerateTimeSeriesIndexFileData = {
    body: TimeSeriesFileRequest;
    path?: never;
    query?: never;
    url: '/time-series-datasets';
};

export type GenerateTimeSeriesIndexFileErrors = {
    /**
     * Unathorized
     */
    401: UnauthorizedResponse;
    /**
     * Location out of boundaries
     */
    404: OutOfBoundariesResponse;
    /**
     * Invalid Parameters
     */
    422: ValidateError;
    /**
     * Internal Server Error
     */
    500: _Error;
};

export type GenerateTimeSeriesIndexFileError = GenerateTimeSeriesIndexFileErrors[keyof GenerateTimeSeriesIndexFileErrors];

export type GenerateTimeSeriesIndexFileResponses = {
    /**
     * Time series generation process started.
     */
    200: {
        message: string;
        status: string;
        jobId: string;
    };
};

export type GenerateTimeSeriesIndexFileResponse = GenerateTimeSeriesIndexFileResponses[keyof GenerateTimeSeriesIndexFileResponses];

export type GetFuelBreaksDetailedData = {
    body?: never;
    path?: never;
    query?: {
        periodType?: string;
        periodTime?: string;
        fuelBreakTypeNetwork?: string;
        fuelBreakTypeId?: string;
        location?: string;
        predictedState?: string;
        observedState?: string;
        responsibleEntity?: string;
        page?: number;
        limit?: number;
    };
    url: '/fuel-breaks-detailed';
};

export type GetFuelBreaksDetailedResponses = {
    /**
     * Success
     */
    200: Array<DetailedFuelBreak>;
};

export type GetFuelBreaksDetailedResponse = GetFuelBreaksDetailedResponses[keyof GetFuelBreaksDetailedResponses];

export type GetFuelBreakDetailedByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/fuel-breaks-detailed/{id}';
};

export type GetFuelBreakDetailedByIdErrors = {
    /**
     * Job not found
     */
    404: NotFoundResponse;
};

export type GetFuelBreakDetailedByIdError = GetFuelBreakDetailedByIdErrors[keyof GetFuelBreakDetailedByIdErrors];

export type GetFuelBreakDetailedByIdResponses = {
    /**
     * Success
     */
    200: DetailedFuelBreak;
};

export type GetFuelBreakDetailedByIdResponse = GetFuelBreakDetailedByIdResponses[keyof GetFuelBreakDetailedByIdResponses];

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type LoginResponses = {
    /**
     * Ok
     */
    200: LoginResponse;
};

export type LoginResponse2 = LoginResponses[keyof LoginResponses];

export type RegisterData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterResponses = {
    /**
     * Ok
     */
    200: LoginResponse;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type ClientOptions = {
    baseUrl: 'http://91.134.84.183/api' | (string & {});
};