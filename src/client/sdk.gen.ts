// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetSegmentsFromStacData, GetSegmentsFromStacResponses, GetSegmentsFromStacErrors, GetSegmentIdsFromStacData, GetSegmentIdsFromStacResponses, GetSegmentIdsFromStacErrors, GetFuelBreaksFromStacData, GetFuelBreaksFromStacResponses, GetFuelBreaksFromStacErrors, GetFuelBreakFromStacByIdData, GetFuelBreakFromStacByIdResponses, GetFuelBreakFromStacByIdErrors, DeleteJobData, DeleteJobResponses, DeleteJobErrors, GetJobStatusData, GetJobStatusResponses, GetJobStatusErrors, PutJobData, PutJobResponses, PutJobErrors, GetJobsData, GetJobsResponses, PostJobData, PostJobResponses, GetTimeSeriesIndexFileData, GetTimeSeriesIndexFileResponses, GetTimeSeriesIndexFileErrors, GenerateTimeSeriesIndexFileData, GenerateTimeSeriesIndexFileResponses, GenerateTimeSeriesIndexFileErrors, GetFuelBreaksDetailedData, GetFuelBreaksDetailedResponses, GetFuelBreakDetailedByIdData, GetFuelBreakDetailedByIdResponses, GetFuelBreakDetailedByIdErrors, LoginData, LoginResponses, LoginErrors, RegisterData, RegisterResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Fetch segments from STAC API based on location
 */
export const getSegmentsFromStac = <ThrowOnError extends boolean = false>(options: Options<GetSegmentsFromStacData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetSegmentsFromStacResponses, GetSegmentsFromStacErrors, ThrowOnError>({
        url: '/stac/segments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch segment IDs from STAC API based on location
 */
export const getSegmentIdsFromStac = <ThrowOnError extends boolean = false>(options: Options<GetSegmentIdsFromStacData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetSegmentIdsFromStacResponses, GetSegmentIdsFromStacErrors, ThrowOnError>({
        url: '/stac/segments/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch fuel breaks from STAC API. If a location is provided, fetch based on location, otherwise fetch all.
 */
export const getFuelBreaksFromStac = <ThrowOnError extends boolean = false>(options?: Options<GetFuelBreaksFromStacData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFuelBreaksFromStacResponses, GetFuelBreaksFromStacErrors, ThrowOnError>({
        url: '/stac/fuel-breaks',
        ...options
    });
};

/**
 * Fetch a specific fuel break from STAC API by ID
 */
export const getFuelBreakFromStacById = <ThrowOnError extends boolean = false>(options: Options<GetFuelBreakFromStacByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFuelBreakFromStacByIdResponses, GetFuelBreakFromStacByIdErrors, ThrowOnError>({
        url: '/stac/fuel-breaks/{id}',
        ...options
    });
};

export const deleteJob = <ThrowOnError extends boolean = false>(options: Options<DeleteJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteJobResponses, DeleteJobErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/jobs/{id}',
        ...options
    });
};

export const getJobStatus = <ThrowOnError extends boolean = false>(options: Options<GetJobStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobStatusResponses, GetJobStatusErrors, ThrowOnError>({
        url: '/jobs/{id}',
        ...options
    });
};

export const putJob = <ThrowOnError extends boolean = false>(options: Options<PutJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutJobResponses, PutJobErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/jobs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getJobs = <ThrowOnError extends boolean = false>(options?: Options<GetJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJobsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/jobs',
        ...options
    });
};

export const postJob = <ThrowOnError extends boolean = false>(options: Options<PostJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostJobResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/jobs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Downloads the time series index file with the provided id.
 */
export const getTimeSeriesIndexFile = <ThrowOnError extends boolean = false>(options: Options<GetTimeSeriesIndexFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimeSeriesIndexFileResponses, GetTimeSeriesIndexFileErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/time-series-datasets/{id}',
        ...options
    });
};

export const generateTimeSeriesIndexFile = <ThrowOnError extends boolean = false>(options: Options<GenerateTimeSeriesIndexFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateTimeSeriesIndexFileResponses, GenerateTimeSeriesIndexFileErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/time-series-datasets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getFuelBreaksDetailed = <ThrowOnError extends boolean = false>(options?: Options<GetFuelBreaksDetailedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFuelBreaksDetailedResponses, unknown, ThrowOnError>({
        url: '/fuel-breaks-detailed',
        ...options
    });
};

export const getFuelBreakDetailedById = <ThrowOnError extends boolean = false>(options: Options<GetFuelBreakDetailedByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFuelBreakDetailedByIdResponses, GetFuelBreakDetailedByIdErrors, ThrowOnError>({
        url: '/fuel-breaks-detailed/{id}',
        ...options
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};