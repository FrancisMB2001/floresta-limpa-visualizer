// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetSegmentsFromStacData, GetSegmentsFromStacResponses, GetSegmentsFromStacErrors, GetSegmentIdsFromStacData, GetSegmentIdsFromStacResponses, GetSegmentIdsFromStacErrors, GetFuelBreaksFromStacData, GetFuelBreaksFromStacResponses, GetFuelBreaksFromStacErrors, GetFuelBreakFromStacByIdData, GetFuelBreakFromStacByIdResponses, GetFuelBreakFromStacByIdErrors, GetJobStatusData, GetJobStatusResponses, GetJobStatusErrors, GetNetCdfIndexesData, GetNetCdfIndexesResponses, GetNetCdfIndexesErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Fetch segments from STAC API based on location
 */
export const getSegmentsFromStac = <ThrowOnError extends boolean = false>(options: Options<GetSegmentsFromStacData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetSegmentsFromStacResponses, GetSegmentsFromStacErrors, ThrowOnError>({
        url: '/stac/segments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch segment IDs from STAC API based on location
 */
export const getSegmentIdsFromStac = <ThrowOnError extends boolean = false>(options: Options<GetSegmentIdsFromStacData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetSegmentIdsFromStacResponses, GetSegmentIdsFromStacErrors, ThrowOnError>({
        url: '/stac/segments/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch fuel breaks from STAC API. If a location is provided, fetch based on location, otherwise fetch all.
 */
export const getFuelBreaksFromStac = <ThrowOnError extends boolean = false>(options?: Options<GetFuelBreaksFromStacData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFuelBreaksFromStacResponses, GetFuelBreaksFromStacErrors, ThrowOnError>({
        url: '/stac/fuel-breaks',
        ...options
    });
};

/**
 * Fetch a specific fuel break from STAC API by ID
 */
export const getFuelBreakFromStacById = <ThrowOnError extends boolean = false>(options: Options<GetFuelBreakFromStacByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFuelBreakFromStacByIdResponses, GetFuelBreakFromStacByIdErrors, ThrowOnError>({
        url: '/stac/fuel-breaks/{id}',
        ...options
    });
};

export const getJobStatus = <ThrowOnError extends boolean = false>(options: Options<GetJobStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobStatusResponses, GetJobStatusErrors, ThrowOnError>({
        url: '/jobs/{id}',
        ...options
    });
};

export const getNetCdfIndexes = <ThrowOnError extends boolean = false>(options: Options<GetNetCdfIndexesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetNetCdfIndexesResponses, GetNetCdfIndexesErrors, ThrowOnError>({
        url: '/indexes/netcdf',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};